class Solution {
    public int solution(int[] A) {
        // write your code in C# 6.0 with .NET 4.5 (Mono)
        
        int maxProfit=0;
        int sum=0;
        
         if(A.Length<2)
            return 0;
        
        int[] dailyProfit=new int[A.Length-1];
        
       
        
        for(int i=1;i<A.Length;i++){
            
            dailyProfit[i-1]=A[i]-A[i-1];           
            
        }
        
        //the goal os the function is get the beiggest upward movement; in order to have it we need to calculate local mina nd max
        for(int i=0;i<dailyProfit.Length;i++){
           
           //if sum+dailyProfit[i] then we get local minimum
            sum=Math.Max(0,sum+dailyProfit[i]);
           //if maxProfit is higher than sum we get local max
            maxProfit=Math.Max(maxProfit,sum);
            
        }
        return maxProfit;
    }
}
